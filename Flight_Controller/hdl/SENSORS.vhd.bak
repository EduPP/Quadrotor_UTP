------------------------------------------------------------
--
-- SBA_LED Simple Demo 3
-- 2013-01-23:
--
-- (c) Miguel A. Risco Castillo
-- email: mrisco@accesus.com
-- sba page: http://sba.accesus.com
--
-- This code, modifications, derivate work or
-- based upon, can not be used or distributed
-- without the complete credits on this header.
--
-- This version is released under the GNU/GLP license
-- http://www.gnu.org/licenses/gpl.html
-- if you use this component for your research please
-- include the appropriate credit of Author.
--
-- For commercial purposes request the appropriate
-- license from the author.
--
------------------------------------------------------------


Library IEEE;
use IEEE.std_logic_1164.all;
use work.SBA_config.all;
use work.SBA_package.all;

entity I2C_MAG is
port (
   CLK_BRD : in std_logic;
   RST_BRD : in std_logic;
   -- LEDS;
   LEDS    : out std_logic_vector(7 downto 0);
   -- I2C interface
   I2C_SCLK       : inout std_logic;
	I2C_SDAT       : inout std_logic;
	G_SENSOR_CS_N  : out std_logic    -- Selecciona Acelerometro 

);
end I2C_MAG;

------------------------------------------------------------

architecture Test of I2C_MAG is

-- SBA internal signals
   Signal RSTi  : Std_Logic;
   Signal CLKi  : Std_Logic;
   Signal ADRi  : ADDR_type;
   Signal DATOi : DATA_type;
   Signal DATIi : DATA_type;
   Signal STBi  : STB_type;
   Signal WEi   : Std_Logic;
   Signal ACKi  : Std_Logic;
   Signal INTi  : Std_Logic;

-- Auxiliary signals
   Signal STBEi : std_logic;                    -- Signal to interconect components ports
   Signal RSTe  : std_logic;                    -- Signal to connect to external ports
   Signal LEDSe : std_logic_vector(7 downto 0); -- Signal to connect to external ports
	signal DAT_I2C   : DATA_type;
	Signal DAT_GPIO1 : DATA_type;
	
------------------------------------------------------------

begin

   Sys : entity work.SysCon
   port Map(
     CLK_I => CLK_BRD,
     CLK_O => CLKi,
     RST_I => RSTe,
     RST_O => RSTi
   );

   MasterController : entity work.SBAController
     port Map(
       RST_I => RSTi,
       CLK_I => CLKi,
       DAT_I => DATIi,
       DAT_O => DATOi,
       ADR_O => ADRi,
       STB_O => STBEi,
       WE_O  => WEi,
       ACK_I => ACKi,
       INT_I => INTi
     );

   Addr_Space : entity work.AddrSpace
      port Map(
        STB_I => STBEi,
        ADR_I => ADRi,
        STB_O => STBi
      );


   GPIO: entity work.GPIO_Adapter
   generic map(size=>8)
   port map(
      -- SBA Bus Interface
      RST_I => RSTi,
      CLK_I => CLKi,
      DAT_I => DATOi,
      DAT_O => DAT_GPIO1,
      STB_I => STBi(STB_LEDS),
      WE_I  => WEi,
      -- PORTS Interface,
      P_I   => (others => '0'),
      P_O   => LEDSe
      );

   GPIO1DataInt: entity work.DataIntf
   port Map(
      STB_I => STBi(STB_LEDS),
      DAT_I => DAT_GPIO1,
      DAT_O => DATIi
   );

I2C: entity work.I2C_CORE
     generic map (
              CLK_FREC      => 50e6,
              I2C_ADDRESS   => 7,
              I2C_CLK       => 400e3
          ) 
     port map(
     -- SBA Bus Interface
      CLK_I  => CLKi,
      RST_I  => RSTi,
      -- Output Port 0
      WE_I   => WEi,             
      STB_I  => STBi(STB_I2C),
      ACK_O  => open,         -- Strobe Acknoledge
      ADR_I  => ADRi(1 downto 0), 
      DAT_I  => DATOi, 
      DAT_O  => DAT_I2C,
      
      --
      I2C_SCL => I2C_SCLK,
      I2C_SDA => I2C_SDAT

      );

   I2CDataIntf: entity work.DataIntf
   port Map(
      STB_I => STBi(STB_I2C),
      DAT_I => DAT_I2C,
      DAT_O => DATIi
   );


-- External Signals Assignments
-------------------------------
RSTe  <= not RST_BRD;         -- Depends of the hardware active low or high reset
LEDS  <= LEDSe;   -- if LEDS are Common Anode then negate LEDSe
G_SENSOR_CS_N <= '1';         -- CS acelerometro

-- Internal Signals Assigments
------------------------------
ACKi <= '1';

end Test;
------------------------------------------------------------